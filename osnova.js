//------------------------------------------------------------------------------------------------------//
//Переменные
//Объявления переменных
//Есть три вида объявления переменных
var //Для var не существует блочный область видимости
let //А для let существует блочный область видимости
const // Констант это постоянное объявления переменных он не изменима
//Пример
if(true){
    var a=1;
}
console.log(a); //1
if(true){
    let b=5;
}
console.log(b); // b is not defined так как b существует в блочный область видимости
const c=5;
c=4;
console.log(c); //Ну и здесь c не изменнимо

//Сами переменные
//Немного примера
var massage = "Hello";
//Здесь есть переменная с именем massage
//и в котором идет оператор присваевание к massage-у значение "Hello" тип String
console.log(massage); //Hello
//Ну и именна переменных должно содержат только букви, цифри или символы
var 1user; //Синтаксическая ошибка так как имя пер. не должно содержать цифри в начале
var my-name; // Дефис тоже не разрешен

var user123; //Вот так правильно
var $=1; // объявили переменную с именем "$"
var _=2; // ну а теперь переменную с именем "_"
console.log($+_);//3

//------------------------------------------------------------------------------------------------------//

//Типы данных
//В js существует 6 типов

//1 - Number (число)
//Пример
var n = 123; //Целочисленный числовой тип данных 
var n1 = 1.23; //Число с плавающей точки

//2 - String (строка)
//Ну строка в JavaScript должна быть заключена в кавычки
var str = "Hello";
var str1 = 'Одинарные кавычки тоже подойдут';
var str3 = `Обратные кавычки позволяют встраивать переменные ${str}`;

//3 - Boolean (логический)
//Bool тип принимает 2 значения true и false
//Ну и есть три вида булевых оператор
// "&&"  "||" "!"
//К примеру
console.log(true && true); //true
console.log(true && false); // false
console.log(false  && false); //false
console.log(true || true); //true
console.log(true || false); //true
console.log(false || false); //false
console.log(!true); //false
console.log(!false); //true

//4 - Null (ничего)
//Пример
var n = null; //Здесь n = ничего
n = 123; //Потом n стал number

//5 - Undefined (значение не было присвоено)
//К примеру
var n;
console.log(n); // выводит undefined потому что присвоение к переменную нет

// 6 - Object (объект)
//Пример
var obj = {}; // объекты объявляются с фигурними скобками

//Оператор typeof
//TypeOf выводит тип переменную
//К примеру 
var n = 123;
console.log(typeof n); // Number
var str = "Hello";
console.log(typeof str); //String
var bol = true;
console.log(typeof bol); //Boolean
var nul = null;
console.log(typeof nul); //"object"
var unde;
console.log(typeof unde); // undefined

//------------------------------------------------------------------------------------------------------//

//Преобразование типов
//1 - Строковое преобразование
//Несколько пример
var exam = true;
console.log(typeof exam); //boolean
exam = String(exam); // exam стала строкой "true"
console.log(typeof exam); //String

//2 - Численное преобразование
//Пример

console.log("6"/"2"); //3, Строки преобразуются в числа

var num = "123";
console.log(typeof num); //String

num = Number(num);//становится числом 123
console.log(typeof num);//number

console.log( Number("   123   ") ); // 123
console.log( Number("123z") );// NaN (ошибка чтения числа в "z")
console.log( Number(true) );// 1
console.log( Number(false) );// 0

//Сложение "+" объединяет строки
console.log( 1 + '2' ); // '12' (строка справа)
console.log( '1' + 2 ); // '12' (строка слева)

//3 - Логическое преобразование
//Все пустые значение 0, пустая строка,null, undefined и NaN становятся false
//А все осталние true
console.log( Boolean(1) ); // true
console.log( Boolean(0) ); // false

console.log( Boolean("Привет!") ); // true
console.log( Boolean("") ); // false

alert( Boolean("0") ); // true
alert( Boolean(" ") ); // пробел это тоже true (любая непустая строка это true)

//------------------------------------------------------------------------------------------------------//

//Операторы
//В js можно использовать арифметические операторы, таких как "+", "-", "*", "/"
//Но наряду с этим существует ещё  некоторые операторы
//К примеру Унарные, бинарные и операнды
//Операнды - к примеру 1 * 2, 1 - левый операнд, а 2 правый операнд

//Унарный оператор
//Унарным называется оператор, который применяется к одному операнду. 
//Например, оператор унарный минус "-" меняет знак числа на противоположный:
var x = 1;
x = -x;
console.log(x); //-1, уанарный минус

//Бинарным называется оператор, который применяется к двум операндам. Тот же минус существует и в бинарной форме:
var x = 1;
var y = 3;
console.log(y - x);// 2, бинарный минус

//Сложение строк, бинарный +
var s = "hello" + "world";
console.log(s); // helloworld

//Если хотя бы один операнд является строкой, то второй будет также преобразован к строке.
console.log( '1' + 2 ); // "12"
console.log( 2 + '1' ); // "21"

console.log(2 + 2 + '1' ); // будет "41"
//Сложение и преобразование строк – это особенность бинарного плюса +. 
//Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.
//К примеру 
console.log( 2 - '1' ); // 1
console.log( '6' / '2' ); // 3

//Преобразование к числу, унарный плюс +
// Не влияет на числа
var x = 1;
console.log( +x ); // 1

var y = -2;
console.log( +y ); // -2

// Преобразует нечисла в числа
console.log( +true ); // 1
console.log( +"" );   // 0

//Бинарный плюс сложит их как строки:
var a = "2";
var b = "3";

console.log( a + b ); // "23", так как бинарный плюс складывает строки

//унарный плюс, чтобы преобразовать к числу:
var a = "2";
var b = "3";

// оба операнда предварительно преобразованы в числа
console.log( +a + +b ); // 5

//Остаток от деления %
console.log( 5 % 2 ); // 1, остаток от деления 5 на 2
console.log( 8 % 3 ); // 2, остаток от деления 8 на 3
console.log( 6 % 3 ); // 0, остаток от деления 6 на 3

//Возведение в степень **
console.log( 2 ** 2 ); // 4  (2 * 2)
console.log( 2 ** 3 ); // 8  (2 * 2 * 2)
console.log( 2 ** 4 ); // 16 (2 * 2 * 2 * 2)

//Инкремент/декремент
//1 - Инкремент ++ увеличивает на 1:
var counter = 2;
counter++; // работает как counter = counter + 1, просто запись короче
console.log( counter ); // 3

//2 - Декремент -- уменьшает на 1:
var counter = 2;
counter--; // работает как counter = counter - 1, просто запись короче
console.log( counter ); // 1

//Когда оператор идёт после переменной – это «постфиксная форма»: counter++.
//«Префиксная форма» – это когда оператор идёт перед переменной: ++counter.
//Разница между ними
//Префиксная форма возвращает новое значение, в то время как постфиксная форма возвращает старое (до увеличения/уменьшения числа).
var counter = 1;
var a = ++counter; // (*)

console.log(a); // 2
//префиксная форма увеличения counter, она возвращает новое значение 2
var counter = 1;
var a = counter++; // (*) меняем ++counter на counter++

console.log(a); // 1
//постфиксная форма counter++ также увеличивает counter, но возвращает старое значение (которое было до увеличения).

//------------------------------------------------------------------------------------------------------//
//Условные операторы
//Существует два вида условных оператор if и тернарный оператор
//Пример if
var a = 1;
if(a == 1){
    console.log(a);
} 
//else if
if(a<0){
    console.log(a);
} else if(a<=0){
    console.log(a);
} else {console.log(a=0)}
//Тернарный оператор
//Тернарный оператор работает также как и if но количество кода меньше
//К примеру 
(a<0) ? console.log("Yes") : console.log("NO");
(a<0) ? console.log("Yes") :
    (a<=0) ? console.log("Yes") : console.log("NO");